<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
<!ENTITY url_refdocs_librygel_renderer_gst "http:/developer.gnome.org/librygel-renderer-gst/unstable/">
]>

<section id="implementing-renderers-gst">


<para>
This library may be used to create in-process UPnP/DLNA Renderers, or Players, via
the <link linkend="RygelMediaRenderer">RygelMediaRenderer</link> class. For instance,
this may be used to add UPnP/DLNA Renderer or Player capability to an existing media player application.
See the derived
<ulink url="&url_refdocs_librygel_renderer_gst;RygelPlaybinRenderer.html">RygelPlaybinRenderer</ulink>
class, from librygel-renderer-gst, to see how this can be done with GStreamer.
</para>

<!-- TODO: Find a way to mention this C example code in the RygelPlaybinRenderer valadoc comments instead. -->
<!--
<para>
This example program shows how to instantiate the renderer then configure its GStreamer playbin element
and connect it to a network interface.
</para>
-->


<!-- Do not indent the xi:include node. That puts spaces at the start of the code. -->
<!-- TODO: Add a non-GST standalone-renderer example. Maybe use the same code as the example renderer plugin.
<programlisting role="C">
<xi:include  href="../../../../examples/standalone-renderer.c"
    parse="text"
    xmlns:xi="http://www.w3.org/2001/XInclude"/>
</programlisting>
-->

</section>
